var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.685,1,2.89,2,1.33,3,0.481,4,0.481,5,0.414,6,3.029,7,0.627,8,1.864,9,4.429,10,1.33,11,0.039,12,0.882,13,3.68,14,1.471,15,1.523,16,0.61,17,0.882,18,2.521,19,3.029,20,0.481,21,0.024,22,2.601,23,1.631,24,1.471,25,3.68,26,0.03,27,0.03]],["title/modules/AppModule.html",[28,1.083,29,1.858]],["body/modules/AppModule.html",[1,2.768,2,1.405,3,0.366,4,0.366,5,0.315,11,0.039,16,0.686,17,0.671,18,2.585,19,2.305,20,0.366,21,0.018,26,0.025,27,0.025,28,1.614,29,3.564,30,1.979,31,1.241,32,1.541,33,1.541,34,1.241,35,2.458,36,1.541,37,2.305,38,2.305,39,2.305,40,2.585,41,2.888,42,2.325,43,2.14,44,1.541,45,1.541,46,2.799,47,1.241,48,1.723,49,3.2,50,3.887,51,3.887,52,2.41,53,2.799,54,2.799,55,2.799,56,2.799]],["title/injectables/AppService.html",[18,1.477,57,1.083]],["body/injectables/AppService.html",[3,0.508,4,0.508,5,0.437,7,0.662,8,1.928,9,4.515,11,0.038,12,0.931,14,1.553,15,1.576,16,0.508,17,0.931,18,2.376,20,0.508,21,0.025,24,1.553,26,0.031,27,0.031,57,1.743,58,2.138,59,3.197,60,3.883,61,3.883,62,3.883]],["title/controllers/AuthController.html",[0,1.083,63,1.858]],["body/controllers/AuthController.html",[0,1.188,2,1.188,3,0.43,4,0.43,5,0.37,7,0.56,8,1.733,10,1.188,11,0.039,12,0.788,14,1.315,16,0.634,17,0.788,20,0.43,21,0.021,23,1.457,24,1.315,26,0.028,27,0.028,63,2.687,64,2.707,65,2.324,66,4.335,67,2.389,68,4.244,69,4.335,70,3.288,71,1.566,72,2.149,73,2.707,74,2.324,75,1.457,76,3.288,77,3.288,78,2.038,79,2.038,80,2.707,81,2.038,82,3.288,83,3.288,84,2.324,85,1.81,86,2.324]],["title/modules/AuthModule.html",[28,1.083,40,1.477]],["body/modules/AuthModule.html",[2,1.541,3,0.419,4,0.419,5,0.361,11,0.039,16,0.668,17,0.769,20,0.419,21,0.021,26,0.028,27,0.028,28,1.731,30,1.421,31,1.421,32,1.765,33,1.765,34,1.421,35,2.636,36,2.636,40,2.747,42,1.889,43,2.347,44,1.765,45,1.765,52,1.987,63,2.969,72,2.605,73,2.639,87,2.639,88,2.639,89,2.639,90,3.206,91,2.643,92,3.206,93,2.639]],["title/injectables/AuthService.html",[57,1.083,72,1.329]],["body/injectables/AuthService.html",[3,0.347,4,0.347,5,0.299,7,0.452,8,1.498,11,0.039,12,1.041,14,1.498,15,1.733,16,0.49,17,0.637,20,0.347,21,0.017,23,1.177,24,1.498,26,0.024,27,0.024,48,1.66,57,1.354,58,1.461,67,2.542,68,3.573,72,1.66,78,2.322,79,1.646,81,1.646,84,3.332,85,2.389,91,1.646,94,2.186,95,3.881,96,2.186,97,2.165,98,2.655,99,2.062,100,2.062,101,1.106,102,1.66,103,2.655,104,2.655,105,3.746,106,2.655,107,2.648,108,4.34,109,2.186,110,2.186,111,2.186,112,2.655,113,2.655,114,1.877,115,2.655,116,2.655,117,2.655,118,1.877]],["title/classes/CreatePostDto.html",[21,0.019,119,1.65]],["body/classes/CreatePostDto.html",[3,0.16,4,0.16,5,0.138,7,0.209,10,1.619,11,0.039,12,1.074,15,1.571,16,0.49,20,0.16,21,0.017,26,0.013,27,0.013,47,2.367,71,1.864,75,0.543,101,1.523,102,2.168,118,2.444,119,1.13,120,0.543,121,1.008,122,1.06,123,2.847,124,2.652,125,2.652,126,3.434,127,2.652,128,2.652,129,4.337,130,1.874,131,3.458,132,2.847,133,2.183,134,3.742,135,1.224,136,1.224,137,3.104,138,2.053,139,3.104,140,2.053,141,2.053,142,1.224,143,1.224,144,1.924,145,1.224,146,2.053,147,1.69,148,1.69,149,2.053,150,2.053,151,2.444,152,2.053,153,1.224,154,1.224,155,1.224,156,1.224,157,3.104,158,3.104,159,1.273,160,1.69,161,1.224,162,1.224,163,3.104,164,2.053,165,2.053,166,2.053,167,1.224,168,1.224,169,2.053,170,1.224,171,1.224,172,2.053,173,1.224,174,1.224,175,1.224,176,3.104,177,3.104,178,1.69,179,2.053,180,2.053,181,2.053,182,2.053,183,1.224,184,2.847,185,1.224,186,1.69,187,2.183,188,1.224,189,1.224,190,1.224,191,1.224,192,3.104,193,1.224,194,1.224,195,1.224,196,2.652,197,1.224,198,2.053,199,2.053,200,2.465,201,2.811,202,2.645,203,2.053,204,1.008,205,1.008,206,2.053,207,0.603,208,1.224,209,1.224,210,0.865,211,1.224,212,0.865,213,2.847,214,3.273,215,2.388,216,1.224,217,2.053,218,1.008,219,1.224,220,1.224,221,1.224,222,1.224,223,1.224,224,1.224,225,1.224,226,1.224,227,1.224,228,1.008,229,1.224,230,1.224,231,1.224,232,1.69,233,1.224,234,2.053,235,1.273]],["title/classes/CreatePostMetaOptionsDto.html",[21,0.019,144,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.462,4,0.462,5,0.397,7,0.601,10,1.64,11,0.038,12,1.088,15,1.483,16,0.462,20,0.462,21,0.029,26,0.029,27,0.029,71,1.813,101,1.34,120,1.564,122,1.815,144,2.813,151,3.546,200,3.283,202,3.208,207,1.738,232,4.13,235,3.11,236,4.13,237,2.905,238,3.528,239,3.528,240,3.528]],["title/classes/CreateUserDto.html",[21,0.019,241,1.65]],["body/classes/CreateUserDto.html",[3,0.352,4,0.352,5,0.303,7,0.459,10,1.714,11,0.038,12,1.138,15,1.776,16,0.352,20,0.352,21,0.024,26,0.024,27,0.024,84,3.532,101,1.401,107,3.091,120,1.193,122,1.513,178,3.114,200,2.941,201,2.674,202,3.532,204,2.216,205,2.216,207,1.326,228,3.114,241,2.082,242,2.216,243,4.373,244,4.373,245,2.692,246,2.692,247,2.692,248,2.692,249,2.692,250,2.692,251,2.692,252,3.783,253,3.783,254,3.783,255,3.783,256,3.783,257,5.182,258,3.783,259,4.743,260,3.783,261,2.082,262,2.692,263,3.783,264,3.783,265,2.692,266,3.783,267,2.692,268,2.692]],["title/classes/GetUserParamsDto.html",[21,0.019,269,1.65]],["body/classes/GetUserParamsDto.html",[3,0.439,4,0.439,5,0.378,7,0.572,10,1.214,11,0.039,12,0.806,16,0.641,20,0.439,21,0.032,26,0.028,27,0.028,47,1.489,48,2.304,75,1.489,85,2.97,101,1.447,102,1.948,120,1.489,122,1.758,201,3.108,207,1.655,212,2.375,214,3.619,215,2.42,261,2.698,269,2.42,270,3.619,271,2.766,272,3.359,273,3.359,274,3.359,275,3.619,276,1.849]],["title/classes/PatchPostDto.html",[21,0.019,277,1.858]],["body/classes/PatchPostDto.html",[3,0.441,4,0.441,5,0.38,7,0.575,10,1.219,11,0.039,12,0.809,16,0.642,20,0.441,21,0.029,26,0.029,27,0.029,47,1.954,71,1.593,75,1.495,85,2.974,101,0.996,119,1.857,120,1.495,122,1.763,133,2.778,200,2.733,207,1.662,213,3.63,215,1.857,261,2.427,275,3.63,276,2.427,277,2.733,278,3.63,279,2.778,280,3.63,281,4.409,282,3.374,283,3.374,284,2.778,285,3.374,286,3.374]],["title/classes/PatchUserDto.html",[21,0.019,287,1.858]],["body/classes/PatchUserDto.html",[3,0.532,4,0.532,5,0.458,11,0.038,16,0.649,20,0.532,21,0.026,26,0.032,27,0.032,120,1.802,241,2.239,280,4.084,284,3.348,287,3.075,288,3.348,289,3.348,290,4.961,291,3.348,292,3.348,293,4.067]],["title/controllers/PostsController.html",[0,1.083,294,1.858]],["body/controllers/PostsController.html",[0,0.7,2,0.7,3,0.253,4,0.253,5,0.218,7,0.33,8,1.187,10,1.305,11,0.039,12,0.866,14,1.444,15,1.505,16,0.571,17,0.464,20,0.253,21,0.013,22,1.369,23,0.858,24,0.774,26,0.019,27,0.019,47,2.192,49,3.332,65,1.369,67,2.499,71,1.994,74,1.369,75,0.858,79,1.2,80,1.594,99,1.987,100,1.987,101,1.066,102,1.6,119,2.535,130,2.098,210,2.861,277,2.972,294,1.84,295,1.594,296,2.968,297,2.444,298,2.968,299,3.61,300,1.936,301,2.968,302,4.047,303,4.047,304,2.968,305,2.861,306,4.047,307,1.936,308,1.936,309,2.444,310,1.936,311,2.968,312,1.936,313,2.444,314,1.936,315,3.332,316,4.047,317,4.047,318,1.936,319,1.936,320,2.968,321,2.444,322,1.594,323,1.594,324,1.779,325,1.594,326,2.972,327,2.972,328,1.936,329,1.594,330,1.936,331,1.936,332,1.936,333,1.936,334,1.936,335,1.936,336,1.936,337,2.444,338,2.444,339,2.968,340,1.936,341,1.936,342,1.936,343,1.936]],["title/modules/PostsModule.html",[28,1.083,41,1.65]],["body/modules/PostsModule.html",[2,1.562,3,0.428,4,0.428,5,0.369,11,0.039,16,0.673,17,0.785,20,0.428,21,0.021,26,0.028,27,0.028,28,1.749,30,1.451,31,1.451,32,1.802,33,1.802,34,1.451,35,2.664,36,1.802,41,3.132,42,2.436,43,2.379,44,1.802,45,1.802,52,2.68,93,2.695,294,3,324,2.708,325,2.695,344,2.695,345,2.695,346,3.274,347,3.274,348,3.274]],["title/injectables/PostsService.html",[57,1.083,324,1.477]],["body/injectables/PostsService.html",[3,0.36,4,0.36,5,0.31,7,0.468,8,1.535,11,0.039,12,1.061,14,1.535,15,1.445,16,0.579,17,0.659,20,0.36,21,0.018,23,1.218,24,1.099,26,0.025,27,0.025,48,1.96,57,1.387,58,1.514,67,2.57,71,1.599,78,2.38,79,1.704,81,1.704,96,2.264,97,2.141,99,2.113,100,2.113,101,1.134,102,1.701,110,2.264,114,1.943,123,3.941,132,3.642,210,1.943,276,2.113,297,3.941,309,2.264,313,2.264,324,1.891,349,2.264,350,3.161,351,2.749,352,2.749,353,3.839,354,2.749,355,2.749,356,2.749,357,3.161,358,2.264]],["title/controllers/UsersController.html",[0,1.083,359,1.858]],["body/controllers/UsersController.html",[0,0.539,2,0.539,3,0.195,4,0.195,5,0.168,7,0.254,8,0.966,10,1.39,11,0.039,12,0.923,14,1.538,15,1.566,16,0.539,17,0.358,20,0.195,21,0.01,22,1.054,23,0.661,24,1.538,26,0.016,27,0.016,47,2.215,48,0.661,65,1.054,67,2.573,71,1.265,74,1.054,75,0.661,86,3.534,97,0.966,99,1.676,100,2.118,101,1.281,102,1.35,118,1.708,130,2.475,147,2.883,148,1.989,159,2.8,215,1.928,241,2.387,261,2.839,269,1.928,276,1.33,287,2.553,305,1.708,315,1.989,321,1.228,322,1.989,323,1.989,326,1.989,327,3.167,329,1.228,337,1.989,338,1.228,358,3.167,359,1.498,360,1.228,361,2.416,362,3.501,363,3.045,364,3.501,365,2.416,366,1.491,367,1.491,368,3.501,369,1.491,370,1.491,371,3.718,372,1.491,373,1.491,374,2.416,375,2.416,376,1.491,377,2.416,378,1.491,379,2.416,380,2.416,381,2.416,382,1.491,383,2.416,384,2.416,385,1.491,386,2.416,387,1.491,388,2.416,389,1.491,390,1.989,391,3.501,392,1.491,393,1.491,394,2.416,395,1.491,396,2.416,397,1.491,398,1.491,399,3.045,400,1.491,401,1.491,402,1.491,403,1.228,404,1.228,405,1.491,406,1.228,407,3.045,408,1.491,409,1.491,410,1.491,411,1.491,412,1.491,413,1.491,414,1.491,415,1.491,416,1.491,417,1.491,418,1.491,419,1.491,420,1.491,421,1.491,422,1.491,423,3.501,424,1.491]],["title/modules/UsersModule.html",[28,1.083,42,1.329]],["body/modules/UsersModule.html",[2,1.541,3,0.419,4,0.419,5,0.361,11,0.039,16,0.668,17,0.769,20,0.419,21,0.021,26,0.028,27,0.028,28,1.731,30,1.421,31,1.421,32,1.765,33,1.765,34,1.421,35,2.636,36,2.636,40,2.1,42,2.471,43,2.347,44,1.765,45,1.765,52,1.987,91,2.643,97,2.35,359,2.969,406,2.639,425,2.639,426,2.639,427,2.639,428,3.206,429,3.206,430,3.206]],["title/injectables/UsersService.html",[57,1.083,97,1.199]],["body/injectables/UsersService.html",[3,0.283,4,0.283,5,0.244,7,0.369,8,1.291,11,0.039,12,1.027,14,1.291,15,1.262,16,0.505,17,0.519,20,0.283,21,0.014,23,0.959,24,1.291,26,0.021,27,0.021,48,0.959,57,1.167,58,1.191,67,2.578,72,2.207,78,2.002,81,1.341,85,2.646,86,2.282,91,1.341,95,1.782,97,1.291,99,2.126,100,2.741,101,1.265,102,1.712,107,3.028,109,2.658,111,1.782,114,1.53,122,1.291,159,2.395,235,1.341,261,2.646,269,2.358,276,1.778,350,3.18,357,2.658,371,3.18,390,2.658,403,1.782,404,1.782,431,1.782,432,3.863,433,3.229,434,2.164,435,2.164,436,2.164,437,2.164,438,3.229,439,3.229,440,2.164,441,2.164,442,3.229,443,4.283,444,3.229,445,3.229,446,3.229,447,2.164,448,2.164,449,2.164,450,2.164,451,2.164,452,2.164,453,2.164]],["title/coverage.html",[454,2.88]],["body/coverage.html",[0,1.76,1,1.774,5,0.322,6,2.356,11,0.038,18,1.41,21,0.034,26,0.026,27,0.026,34,1.268,48,1.268,57,1.76,59,2.356,63,1.774,64,2.356,71,1.034,72,1.268,94,2.356,97,1.144,101,0.845,119,1.575,121,2.356,144,1.774,151,2.023,236,2.356,237,2.356,241,1.575,242,2.356,269,1.575,270,2.356,271,2.356,277,1.774,278,2.356,279,2.356,287,1.774,288,2.356,289,2.356,294,1.774,295,2.356,305,2.023,324,1.41,349,2.356,359,1.774,360,2.356,431,2.356,454,2.023,455,2.862,456,2.862,457,2.862,458,5.848,459,5.11,460,4.518,461,2.356,462,2.862,463,3.947,464,2.862,465,2.862,466,2.862,467,2.862,468,2.862,469,2.862,470,2.862,471,2.862]],["title/dependencies.html",[31,1.596,472,2.068]],["body/dependencies.html",[11,0.039,17,0.927,21,0.031,26,0.031,27,0.031,31,1.712,75,1.712,207,1.904,212,2.731,291,3.181,292,3.181,473,3.864,474,3.864,475,5.232,476,3.864,477,3.864,478,3.864,479,3.864,480,3.864,481,3.864,482,3.864,483,3.864,484,3.864,485,3.864,486,3.864,487,3.864]],["title/miscellaneous/enumerations.html",[488,1.557,489,2.965]],["body/miscellaneous/enumerations.html",[7,0.636,11,0.038,26,0.03,27,0.03,71,1.7,126,3.873,159,2.916,160,3.873,184,3.873,186,3.873,187,3.873,218,3.873,235,3.623,488,2.314,489,3.073,490,3.733,491,3.733,492,3.733,493,4.704,494,3.733,495,3.733,496,3.733]],["title/miscellaneous/functions.html",[488,1.557,497,2.965]],["body/miscellaneous/functions.html",[7,0.766,11,0.034,26,0.034,27,0.034,34,2.475,461,3.699,488,2.785,497,3.699,498,4.493]],["title/index.html",[7,0.428,499,2.512,500,2.512]],["body/index.html",[11,0.039,26,0.03,27,0.03,215,2.78,454,2.529,501,4.579,502,3.577,503,5.723,504,3.577,505,5.723,506,3.577,507,3.577,508,3.577,509,4.579,510,3.577,511,3.577,512,3.577,513,5.05,514,3.577,515,4.579,516,3.577,517,3.577,518,3.577]],["title/modules.html",[30,1.806]],["body/modules.html",[11,0.033,26,0.033,27,0.033,29,2.589,30,1.851,40,2.058,41,2.299,42,1.851,519,5.624,520,5.624,521,5.624,522,5.624]],["title/overview.html",[523,3.355]],["body/overview.html",[2,1.095,11,0.038,18,2.293,26,0.027,27,0.027,28,1.095,29,3.552,30,1.343,31,1.343,32,1.668,33,1.668,34,1.343,35,1.668,36,1.668,37,2.494,38,2.494,39,2.494,40,2.648,41,3.026,42,2.436,43,2.259,44,1.668,45,1.668,58,1.668,72,2.436,87,2.494,88,2.494,89,2.494,97,2.198,120,1.343,324,2.293,344,2.494,345,2.494,425,2.494,426,2.494,427,2.494,523,2.494,524,4.654,525,3.03]],["title/properties.html",[122,1.44,472,2.068]],["body/properties.html",[11,0.038,26,0.034,27,0.034,47,1.957,122,1.766,526,4.416,527,4.416,528,4.416,529,4.416,530,4.416]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":527,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["01t00:00:00.000z",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["09",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":276,"title":{},"body":{"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1.1.23",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["1})@isoptional()@isint()@type(undefined",{"_index":273,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["2",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["2.0.5",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["2021",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":524,"title":{},"body":{"overview.html":{}}}],["400",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["404",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["500",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["6",{"_index":525,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apioperation",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({description",{"_index":272,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({enum",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({example",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arch",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["arch'})@isenum(poststatus)@isnotempty",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["array",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":63,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":530,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":72,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["bad",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["body",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":522,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":519,"title":{},"body":{"modules.html":{}}}],["case",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["check",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":344,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":346,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":345,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":425,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":426,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":427,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compodoc/compodoc",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["console.log(createuserdto",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostdto",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":454,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["create.post.dto",{"_index":285,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["create.user.dto",{"_index":293,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["created",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["createpost",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":119,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":144,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":241,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["data",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["data'})@patch('/:postid",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["data'})@post",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["date",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["defaultvaluepipe",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":494,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deleteuser",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["development",{"_index":506,"title":{},"body":{"index.html":{}}}],["dj@doe.com",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["documentation",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["draft",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create.post.dto",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/create.user.dto",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/get",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e.g",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["e2e",{"_index":516,"title":{},"body":{"index.html":{}}}],["each",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["email",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":489,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["error'})@apiresponse({status",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["example",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["excerpt",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["existing",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["exists",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":280,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":350,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{}}}],["findbyid",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["firstname",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["forwardref",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["found'})@apiresponse({status",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["function",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":497,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":499,"title":{"index.html":{}},"body":{}}],["getuserparamsdto",{"_index":269,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusers",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["headers",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["https://my",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":57,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["installcompile",{"_index":504,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["internal",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["ip",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["isalphanumeric",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isarray",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":275,"title":{},"body":{"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{}}}],["isstring",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isemail()@isnotempty",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":238,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@isalphanumeric()@minlength(8)@matches(/^(?=.*[a",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(20",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(20",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["jd@doe.com",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{}}}],["john",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["kebab",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["key",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["lastname",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":528,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["localhost:3000/auth/login",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["localhost:3000/posts",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["localhost:3000/posts/:userid",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(email",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["lowercase",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(20",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":488,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mode",{"_index":509,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nested",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":291,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["npm",{"_index":503,"title":{},"body":{"index.html":{}}}],["number",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["one",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["option",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":237,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":239,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":240,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":523,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":472,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('postid",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["parameters",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params.dto.ts",{"_index":271,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:13",{"_index":274,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["parseintpipe",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":284,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":281,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":290,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/:postid",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":277,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuserdto",{"_index":287,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["person",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["possible",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@isarray()@isoptional()@isstring({each",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isnotempty()@isarray()@isoptional()@validatenested({each",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isoptional()@isjson",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@isoptional()@isurl",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isoptional",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('/login",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.dto",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":279,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:12",{"_index":283,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["postid",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":348,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":294,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":324,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":355,"title":{},"body":{"injectables/PostsService.html":{}}}],["production",{"_index":511,"title":{},"body":{"index.html":{}}}],["project",{"_index":501,"title":{},"body":{"index.html":{}}}],["properties",{"_index":122,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["provided",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published'})@isiso8601()@isoptional",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["put",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiresponse({status",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["r\\n",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["replaceuser",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":358,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["request'})@apiquery({name",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":495,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":505,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["scheduled",{"_index":493,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["series",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["service",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["setup",{"_index":502,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["specify",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/.../main.ts",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":490,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":491,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":60,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":430,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:22",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":461,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":236,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/create.post.dto.ts",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/create.post.dto.ts:100",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:128",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:28",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:36",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:47",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:55",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:63",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:72",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:82",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/create.post.dto.ts:90",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/patch",{"_index":278,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":492,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":496,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:16",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:30",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:41",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":347,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":349,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:11",{"_index":354,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:29",{"_index":352,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:6",{"_index":351,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create.user.dto.ts",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/create.user.dto.ts:17",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/create.user.dto.ts:23",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/create.user.dto.ts:28",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/create.user.dto.ts:38",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/get",{"_index":270,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":288,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:12",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:27",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:36",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:6",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:58",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:73",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":428,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":507,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":510,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":512,"title":{},"body":{"index.html":{}}}],["started",{"_index":500,"title":{"index.html":{}},"body":{}}],["statements",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["story",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apioperation({summary",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":520,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":521,"title":{},"body":{"modules.html":{}}}],["table",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":515,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":518,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":517,"title":{},"body":{"index.html":{}}}],["tests",{"_index":513,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.login('email",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.postsservice.findall(userid",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.user_data",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.user_data.find((user",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbyid(id",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyid(userid",{"_index":356,"title":{},"body":{"injectables/PostsService.html":{}}}],["title",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"dependencies.html":{}}}],["true",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["true})@minlength(3",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":292,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["undefined",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":514,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":529,"title":{},"body":{"properties.html":{}}}],["update",{"_index":286,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["update'})@isint()@isnotempty",{"_index":282,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(postid",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateuser",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(patchuserdto",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["uppercase",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url.com",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUserParamsDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":289,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.email",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_data",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiresponse({status",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":429,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":359,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":97,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validatenested",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":526,"title":{},"body":{"properties.html":{}}}],["void",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["watch",{"_index":508,"title":{},"body":{"index.html":{}}}],["world",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["z0",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d]{8",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)[a",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            User created modules are imported here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n/**\n * User created modules are imported here\n */\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n  constructor(\n    // Injecting auth service\n\n    private readonly authService: AuthService,\n  ) {}\n\n  // POST localhost:3000/auth/login\n  @Post('/login')\n  public login() {\n    return this.authService.login('email', 'password', 'id');\n  }\n\n  // GET Users\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { token: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting UsersService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string, id) {\n    // check if user exists\n    const user = this.usersService.findById(id);\n    // login\n    if (user.email === email && user.password === password) {\n      return {\n        token: 'token',\n      };\n    }\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create.post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is my first post', description: 'The content of the post'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'https://my-image-url.com', description: 'The featured image of the post'})@IsString()@IsNotEmpty()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined, description: 'The meta options of the post'})@IsNotEmpty()@IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values: 'post' | 'page' | 'story' | 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '2021-09-01T00:00:00.000Z', description: 'The date the post was published'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}', description: 'The excerpt of the post'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'my-first-post', description: 'The slug of the post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be kebab-case e.g my-url-slug '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: postStatus, description: 'Possible values: 'draft' | 'published' | 'arch'})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'The tags of the post'})@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'My first post', description: 'The title of the post'})@IsString()@IsNotEmpty()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create.post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'My first post',\n    description: 'The title of the post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values: 'post' | 'page' | 'story' | 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    example: 'my-first-post',\n    description: 'The slug of the post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message: 'Slug must be kebab-case e.g my-url-slug ',\n  })\n  slug: string;\n\n  @ApiProperty({\n    example: 'This is my first post',\n    description: 'The content of the post',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    enum: postStatus,\n    description: \"Possible values: 'draft' | 'published' | 'arch\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status?: postStatus;\n\n  @ApiPropertyOptional({\n    example:\n      '{\\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n}',\n    description: 'The excerpt of the post',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    example: 'https://my-image-url.com',\n    description: 'The featured image of the post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    example: '2021-09-01T00:00:00.000Z',\n    description: 'The date the post was published',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishedOn?: Date;\n\n  @ApiPropertyOptional({\n    example: ['tag1', 'tag2'],\n    description: 'The tags of the post',\n  })\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  // nested DTO\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          example: 'sidebarEnabled',\n          description: 'The key of the meta option',\n        },\n        value: {\n          type: 'any',\n          example: true,\n          description: 'The value of the meta option',\n        },\n      },\n    },\n    description: 'The meta options of the post',\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create.user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsAlphanumeric()@MinLength(8)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, and one number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(20)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(20)\n  lastName: string;\n\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @MinLength(8)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {\n    message:\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User ID', example: 1})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-params.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUserParamsDto {\n  @ApiPropertyOptional({\n    description: 'User ID',\n    example: 1,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'The id of the post to update'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create.post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    example: 1,\n    description: 'The id of the post to update',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create.user.dto';\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 201, description: 'You get a 201 response if the post is created successfully'})@ApiOperation({summary: 'Create a new post', description: 'Create a new post with the provided data'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(postId: string, patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'You get a 200 response if the post is created successfully'})@ApiOperation({summary: 'Updates an existing post', description: 'Updates and existing post with the provided data'})@Patch('/:postId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create.post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {\n    // Injecting posts service\n  }\n\n  // GET localhost:3000/posts/:userId\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  // POST localhost:3000/posts\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if the post is created successfully',\n  })\n  @ApiOperation({\n    summary: 'Create a new post',\n    description: 'Create a new post with the provided data',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {}\n\n  @ApiResponse({\n    status: 200,\n    description: 'You get a 200 response if the post is created successfully',\n  })\n  @ApiOperation({\n    summary: 'Updates an existing post',\n    description: 'Updates and existing post with the provided data',\n  })\n  @Patch('/:postId')\n  public updatePost(\n    @Param('postId') postId: string,\n    @Body() patchPostDto: PatchPostDto,\n  ) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { title } from 'process';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    // Injecting UsersService\n    private readonly usersService: UsersService,\n  ) {}\n  public findAll(userId: string) {\n    const user = this.usersService.findById(userId);\n\n    return [\n      {\n        user,\n        title: 'Post 1',\n        content: 'Content 1',\n      },\n      {\n        user,\n        title: 'Post 2',\n        content: 'Content 2',\n      },\n    ];\n  }\n\n  // Create Post Request\n  public createPost() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                replaceUser\n                            \n                            \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Get all users'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiResponse({status: 404, description: 'No users found'})@ApiResponse({status: 500, description: 'Internal server error'})@ApiResponse({status: 400, description: 'Bad request'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Limit the number of users returned', example: 10})@ApiQuery({name: 'page', type: 'number', required: true, description: 'Specify the page number', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        replaceUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    replaceUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Put,\n  Delete,\n  Param,\n  Query,\n  Body,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create.user.dto';\nimport { GetUserParamsDto } from './dtos/get-user-params.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly userService: UsersService) {}\n  @Get('/:id?')\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'No users found',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Internal server error',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad request',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Limit the number of users returned',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: true,\n    description: 'Specify the page number',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUserParamsDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ): string {\n    return this.userService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto): string {\n    console.log(createUserDto instanceof CreateUserDto);\n    return 'You sent a POST request to /users';\n  }\n\n  @Patch('/:id?')\n  public updateUser(@Body() patchUserDto: PatchUserDto): string {\n    return 'You sent a PATCH request to /users';\n  }\n\n  @Put()\n  public replaceUser(): string {\n    return 'You sent a PUT request to /users';\n  }\n\n  @Delete()\n  public deleteUser(): string {\n    return 'You sent a DELETE request to /users';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                USER_DATA\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:27\n                        \n                    \n\n\n            \n                \n                        find all users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        USER_DATA\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      name: 'John Doe',\n      email: 'jd@doe.com',\n    },\n    {\n      id: '2',\n      name: 'Jane Doe',\n      email: 'dj@doe.com',\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/users/providers/users.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUserParamsDto } from '../dtos/get-user-params.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    // Inject\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n  public USER_DATA = [\n    {\n      id: '1',\n      name: 'John Doe',\n      email: 'jd@doe.com',\n    },\n    {\n      id: '2',\n      name: 'Jane Doe',\n      email: 'dj@doe.com',\n    },\n  ];\n  /**\n   * find all users\n   */\n  public findAll(\n    getUsersParamDto: GetUserParamsDto,\n    limit: number,\n    page: number,\n  ): any {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n    return this.USER_DATA;\n  }\n  public findById(id: string): any {\n    return this.USER_DATA.find((user) => user.id === id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create.post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create.user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-params.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 DELETED\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
